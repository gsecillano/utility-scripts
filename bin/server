#!/bin/bash
#

usage() {
  cat - <<EOF
Usage:
  server [-h|-f|-J<jvm setting>]
Parameters:
  -h: show this message
  -f: fail if there's a previously running process
EOF
}

PIDFILE=/var/tmp/server.pid

while getopts "hfJ:" flag 
do
  case $flag in
    h)
      usage
      exit 0
      ;;
    f)
      FAIL=true
      shift
      ;;
    J)
      JVMOPTS="$JVMOPTS -J$OPTARG"
      shift
      shift
      ;;
  esac
done

test -n "$FAIL" && ps -p $(cat $PIDFILE) > /dev/null 2>&1 && echo "Server already running" && exit 1

if [ -f $PIDFILE ] && ps -p $(cat $PIDFILE) > /dev/null 2>&1
then
  PID=$(cat $PIDFILE)
  echo Killing process with PID: $PID
  kill $PID > /dev/null 2>&1
  COUNT=0
  while true
  do
    sleep 1
    ps -e | grep $PID > /dev/null 2>&1
    if [ $? -ne 0 ]
    then
      break
    fi
    echo -n .
    COUNT=$(($COUNT+1))
    if [ $COUNT -eq 15 ]
    then
      echo 
      echo Sending SIGKILL to process with PID: $PID
      kill -KILL $PID
      break
    fi
  done
fi

NAME=$(basename $(dirname $(readlink -f .)))

echo Running server
jruby -J-Djruby.loadService.indexing.enabled=true -J-Xmx1300m -J-XX:MaxPermSize=512m $JVMOPTS script/server "$@" 2>&1 | tee /tmp/$NAME.log &
echo $$
# Find child processes 
#ps -o pid --no-headers --ppid $PID > $PIDFILE
JRUBY_PID=$(pgrep -P $$ -f script/server)
pgrep -P $JRUBY_PID java > $PIDFILE
wait $JRUBY_PID
kill $JRUBY_PID
